from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

# ---------------- I18N ----------------

LANGS = ("en", "sk", "de", "uk")

TR = {
    "back": {
        "en": "üîô Back",
        "sk": "üîô Sp√§≈•",
        "de": "üîô Zur√ºck",
        "uk": "üîô –ù–∞–∑–∞–¥",
    },
    "months": {
        "en": {
            "08": "üìÖ 8 August",
            "09": "üìÖ 9 September",
            "10": "üìÖ 10 October",
            "11": "üìÖ 11 November",
            "12": "üìÖ 12 December",
        },
        "sk": {
            "08": "üìÖ 8 August",
            "09": "üìÖ 9 September",
            "10": "üìÖ 10 Okt√≥ber",
            "11": "üìÖ 11 November",
            "12": "üìÖ 12 December",
        },
        "de": {
            "08": "üìÖ 8 August",
            "09": "üìÖ 9 September",
            "10": "üìÖ 10 Oktober",
            "11": "üìÖ 11 November",
            "12": "üìÖ 12 Dezember",
        },
        "uk": {
            "08": "üìÖ 8 –°–µ—Ä–ø–µ–Ω—å",
            "09": "üìÖ 9 –í–µ—Ä–µ—Å–µ–Ω—å",
            "10": "üìÖ 10 –ñ–æ–≤—Ç–µ–Ω—å",
            "11": "üìÖ 11 –õ–∏—Å—Ç–æ–ø–∞–¥",
            "12": "üìÖ 12 –ì—Ä—É–¥–µ–Ω—å",
        },
    },
    "price_buttons": {
        "en": ["üí∂ Up to ‚Ç¨50", "üí∂ ‚Ç¨50‚Äì80", "üí∂ ‚Ç¨80‚Äì100", "üü¢ Cheapest", "üåü All"],
        "sk": ["üí∂ Do 50‚Ç¨", "üí∂ 50‚Äì80‚Ç¨", "üí∂ 80‚Äì100‚Ç¨", "üü¢ Najlacnej≈°ie", "üåü V≈°etky"],
        "de": ["üí∂ Bis 50‚Ç¨", "üí∂ 50‚Äì80‚Ç¨", "üí∂ 80‚Äì100‚Ç¨", "üü¢ Am g√ºnstigsten", "üåü Alle"],
        "uk": ["üí∂ –î–æ 50‚Ç¨", "üí∂ 50‚Äì80‚Ç¨", "üí∂ 80‚Äì100‚Ç¨", "üü¢ –ù–∞–π–¥–µ—à–µ–≤—à—ñ", "üåü –£—Å—ñ"],
    },
    "return_buttons": {
        "en": ["‚Ü©Ô∏è In 1‚Äì3 days", "‚Ü©Ô∏è In 3‚Äì5 days", "‚Ü©Ô∏è In 5‚Äì10 days", "üü¢ Cheapest (‚â§2 weeks)"],
        "sk": ["‚Ü©Ô∏è O 1‚Äì3 dni", "‚Ü©Ô∏è O 3‚Äì5 dn√≠", "‚Ü©Ô∏è O 5‚Äì10 dn√≠", "üü¢ Najlacnej≈°ie (do 2 t√Ω≈æd≈àov)"],
        "de": ["‚Ü©Ô∏è In 1‚Äì3 Tagen", "‚Ü©Ô∏è In 3‚Äì5 Tagen", "‚Ü©Ô∏è In 5‚Äì10 Tagen", "üü¢ Am g√ºnstigsten (‚â§2 Wochen)"],
        "uk": ["‚Ü©Ô∏è –ß–µ—Ä–µ–∑ 1‚Äì3 –¥–Ω—ñ", "‚Ü©Ô∏è –ß–µ—Ä–µ–∑ 3‚Äì5 –¥–Ω—ñ–≤", "‚Ü©Ô∏è –ß–µ—Ä–µ–∑ 5‚Äì10 –¥–Ω—ñ–≤", "üü¢ –ù–∞–π–¥–µ—à–µ–≤—à–µ (–¥–æ 2 —Ç–∏–∂–Ω—ñ–≤)"],
    },
    "country_mode": {
        "en": ("üåç All countries", "üéØ Specific country"),
        "sk": ("üåç V≈°etky krajiny", "üéØ Konkr√©tna krajina"),
        "de": ("üåç Alle L√§nder", "üéØ Spezifisches Land"),
        "uk": ("üåç –£—Å—ñ –∫—Ä–∞—ó–Ω–∏", "üéØ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –∫—Ä–∞—ó–Ω–∞"),
    },
    "country_period": {
        "en": ["üóì 1 month", "üóì 1‚Äì3 months", "üóì 3‚Äì6 months", "üü¢ Cheapest (6 mo.)"],
        "sk": ["üóì 1 mesiac", "üóì 1‚Äì3 mesiace", "üóì 3‚Äì6 mesiacov", "üü¢ Najlacnej≈°ie (6 mes.)"],
        "de": ["üóì 1 Monat", "üóì 1‚Äì3 Monate", "üóì 3‚Äì6 Monate", "üü¢ Am g√ºnstigsten (6 Mon.)"],
        "uk": ["üóì 1 –º—ñ—Å—è—Ü—å", "üóì 1‚Äì3 –º—ñ—Å—è—Ü—ñ", "üóì 3‚Äì6 –º—ñ—Å—è—Ü—ñ–≤", "üü¢ –ù–∞–π–¥–µ—à–µ–≤—à–µ (6 –º—ñ—Å.)"],
    },
    "origin_labels": {
        "en": [("üá∏üá∞ Bratislava", "BTS"), ("üá∏üá∞ Ko≈°ice", "KSC"), ("üá¶üáπ Vienna", "VIE")],
        "sk": [("üá∏üá∞ Bratislava", "BTS"), ("üá∏üá∞ Ko≈°ice", "KSC"), ("üá¶üáπ Viede≈à", "VIE")],
        "de": [("üá∏üá∞ Bratislava", "BTS"), ("üá∏üá∞ Ko≈°ice", "KSC"), ("üá¶üáπ Wien", "VIE")],
        "uk": [("üá∏üá∞ –ë—Ä–∞—Ç–∏—Å–ª–∞–≤–∞", "BTS"), ("üá∏üá∞ –ö–æ—à–∏—Ü–µ", "KSC"), ("üá¶üáπ –í—ñ–¥–µ–Ω—å", "VIE")],
    },
}

def _lang(lang: str) -> str:
    return lang if lang in LANGS else "en"

# ---------------- Language keyboard ----------------
def language_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="English", callback_data="lang:en"),
        InlineKeyboardButton(text="Slovakian", callback_data="lang:sk"),
        InlineKeyboardButton(text="German", callback_data="lang:de"),
        InlineKeyboardButton(text="–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="lang:uk"),
    )
    builder.adjust(2)
    return builder.as_markup()

# ---------------- Keyboards (with i18n) ----------------
def month_keyboard(lang: str = "en"):
    lang = _lang(lang)
    builder = InlineKeyboardBuilder()
    for code, label in TR["months"][lang].items():
        builder.add(InlineKeyboardButton(text=label, callback_data=code))
    builder.add(InlineKeyboardButton(text=TR["back"][lang], callback_data="back"))
    builder.adjust(3)
    return builder.as_markup()

def price_keyboard(lang: str = "en"):
    lang = _lang(lang)
    texts = TR["price_buttons"][lang]
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text=texts[0], callback_data="p:<=50"),
        InlineKeyboardButton(text=texts[1], callback_data="p:50-80"),
        InlineKeyboardButton(text=texts[2], callback_data="p:80-100"),
        InlineKeyboardButton(text=texts[3], callback_data="p:cheapest"),
        InlineKeyboardButton(text=texts[4], callback_data="p:all"),
        InlineKeyboardButton(text=TR["back"][lang], callback_data="back"),
    )
    builder.adjust(2)
    return builder.as_markup()

def origin_keyboard(lang: str = "en"):
    lang = _lang(lang)
    builder = InlineKeyboardBuilder()
    for name, code in TR["origin_labels"][lang]:
        builder.add(InlineKeyboardButton(text=name, callback_data=f"origin:{code}"))
    builder.add(InlineKeyboardButton(text=TR["back"][lang], callback_data="back"))
    builder.adjust(2)
    return builder.as_markup()

def return_range_keyboard(lang: str = "en"):
    lang = _lang(lang)
    texts = TR["return_buttons"][lang]
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text=texts[0], callback_data="r:1-3"),
        InlineKeyboardButton(text=texts[1], callback_data="r:3-5"),
        InlineKeyboardButton(text=texts[2], callback_data="r:5-10"),
        InlineKeyboardButton(text=texts[3], callback_data="r:cheap14"),
        InlineKeyboardButton(text=TR["back"][lang], callback_data="back"),
    )
    builder.adjust(1)
    return builder.as_markup()

# --- —Ä–µ–∂–∏–º "–∫—Ä–∞—ó–Ω–∞" ---
def country_mode_keyboard(lang: str = "en"):
    lang = _lang(lang)
    all_lbl, pick_lbl = TR["country_mode"][lang]
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text=all_lbl, callback_data="country_mode:all"),
        InlineKeyboardButton(text=pick_lbl, callback_data="country_mode:pick"),
        InlineKeyboardButton(text=TR["back"][lang], callback_data="back"),
    )
    builder.adjust(1)
    return builder.as_markup()

def country_select_keyboard(lang: str = "en"):
    """–í–∏–±—ñ—Ä –∫—Ä–∞—ó–Ω–∏ (—ñ–∑ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—é –∫–Ω–æ–ø–∫–æ—é Back)."""
    lang = _lang(lang)
    countries = [
        ("IT", "üáÆüáπ Italy"), ("ES", "üá™üá∏ Spain"), ("FR", "üá´üá∑ France"),
        ("PT", "üáµüáπ Portugal"), ("NL", "üá≥üá± Netherlands"), ("DE", "üá©üá™ Germany"),
        ("PL", "üáµüá± Poland"), ("AT", "üá¶üáπ Austria"), ("BE", "üáßüá™ Belgium"),
        ("IE", "üáÆüá™ Ireland"), ("GB", "üá¨üáß United Kingdom"), ("CH", "üá®üá≠ Switzerland"),
        ("SE", "üá∏üá™ Sweden"), ("NO", "üá≥üá¥ Norway"), ("DK", "üá©üá∞ Denmark"),
        ("FI", "üá´üáÆ Finland"), ("EE", "üá™üá™ Estonia"), ("LV", "üá±üáª Latvia"),
        ("LT", "üá±üáπ Lithuania"), ("LU", "üá±üá∫ Luxembourg"), ("MT", "üá≤üáπ Malta"),
        ("GR", "üá¨üá∑ Greece"), ("CY", "üá®üáæ Cyprus"), ("HR", "üá≠üá∑ Croatia"),
        ("SI", "üá∏üáÆ Slovenia"), ("CZ", "üá®üáø Czech Republic"),
        ("HU", "üá≠üá∫ Hungary"), ("RO", "üá∑üá¥ Romania"), ("BG", "üáßüá¨ Bulgaria"),
        ("AL", "üá¶üá± Albania"), ("BA", "üáßüá¶ Bosnia and Herzegovina"),
        ("ME", "üá≤üá™ Montenegro"),
    ]
    builder = InlineKeyboardBuilder()
    for code, label in countries:
        builder.add(InlineKeyboardButton(text=label, callback_data=f"country:{code}"))
    builder.add(InlineKeyboardButton(text=TR["back"][lang], callback_data="back"))
    builder.adjust(2)
    return builder.as_markup()

def country_range_keyboard(lang: str = "en"):
    lang = _lang(lang)
    texts = TR["country_period"][lang]
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text=texts[0], callback_data="m:1"),
        InlineKeyboardButton(text=texts[1], callback_data="m:1-3"),
        InlineKeyboardButton(text=texts[2], callback_data="m:3-6"),
        InlineKeyboardButton(text=texts[3], callback_data="m:best6"),
        InlineKeyboardButton(text=TR["back"][lang], callback_data="back"),
    )
    builder.adjust(1)
    return builder.as_markup()
