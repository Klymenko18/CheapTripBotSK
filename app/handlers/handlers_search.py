from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from app.states import SearchStates
from app.keyboards.keyboards import month_keyboard, price_keyboard
from app.parsers.ryanair_parser import search_tickets, get_cheapest_from_bratislava

router = Router()

@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û–±–µ—Ä–∏ –º—ñ—Å—è—Ü—å –¥–ª—è –ø–æ—à—É–∫—É ‚úàÔ∏è", reply_markup=month_keyboard())
    await state.set_state(SearchStates.month)

@router.callback_query(SearchStates.month)
async def month_selected(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(month=callback.data)
    await callback.message.answer("–û–±–µ—Ä–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω üí∂", reply_markup=price_keyboard())
    await state.set_state(SearchStates.price)

@router.callback_query(SearchStates.price)
async def price_selected(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    month = data.get("month")
    price_cb = callback.data

    if price_cb == "cheapest":
        await callback.message.answer(f"üîç –®—É–∫–∞—î–º–æ –Ω–∞–π–¥–µ—à–µ–≤—à–∏–π –∫–≤–∏—Ç–æ–∫ –∑ –ë—Ä–∞—Ç–∏—Å–ª–∞–≤–∏ —É {month} –º—ñ—Å—è—Ü—ñ...")
        result = get_cheapest_from_bratislava(month)
        if result:
            await callback.message.answer(result)
        else:
            await callback.message.answer("‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return

    try:
        price = 999 if price_cb == "all" else int(price_cb)
    except ValueError:
        await callback.message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —É —Ü—ñ–Ω—ñ.")
        await state.clear()
        return

    await callback.message.answer(f"üîç –®—É–∫–∞—î–º–æ –∫–≤–∏—Ç–∫–∏ –≤ {month} –º—ñ—Å—è—Ü—ñ –¥–æ {price}‚Ç¨...")
    results = search_tickets(month, price)  # –º—ñ—Å—Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞—î–º–æ

    if results:
        for r in results:
            await callback.message.answer(r)
    else:
        await callback.message.answer("‚ùå –ö–≤–∏—Ç–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    await state.clear()
